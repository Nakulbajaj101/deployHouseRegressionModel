version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  heroku: circleci/heroku@0.0.10

prepare_docker: &defaults
  docker:
    - image: cimg/python:3.8
  working_directory: ~/project


prepare_tox: &prepare_tox
  run:
    name: Install tox
    command: |
      pip install tox

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  download-dataset:
    <<: *defaults
    working_directory: ~/project/deployHouseRegressionModel/housePriceModelling
    steps:
      - checkout:
          path: ~/project
      - python/install-packages:
          pkg-manager: pip
      - *prepare_tox
      - run:
          name: Running the download of dataset
          command: |
            tox -e download_data
  
  train-and-publish-model:
    <<: *defaults
    working_directory: ~/project/deployHouseRegressionModel/housePriceModelling
    steps:
      - checkout:
          path: ~/project
      - python/install-packages:
          pkg-manager: pip
      - *prepare_tox
      - run:
          name: Running the download of dataset
          command: |
            tox -e download_data
      - run:
          name: Train Model
          command: |
            tox

  build-and-test-api: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    <<: *defaults
    working_directory: ~/project/deployHouseRegressionModel/housePriceServiceApi
    steps:
      - checkout:
          path: ~/project
      - python/install-packages:
          pkg-manager: pip
      - *prepare_tox
      - run:
          name: Running the service api
          # This assumes pytest is installed via the install-package step above
          command: |
            tox

  deploy-app-to-heroku:
    <<: *defaults
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - heroku/install
      - run:
          name: Deploy house regression model service to heroku
          command: |
            echo "The command will install heroku"
            git subtree push --prefix deployHouseRegressionModel/housePriceServiceApi https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git heroku master

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  dependencies: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - train-and-publish-model
      - build-and-test-api
      - deploy-app-to-heroku:
          requires:
            - build-and-test-api
          filters:
            branches:
              only: master
